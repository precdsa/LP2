#3 Title: Greedy First Search Algorithm for Prims Minimal Spanning Tree Algorithm
class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        px, py = self.find(x), self.find(y)
        if px == py:
            return False
        if self.rank[px] < self.rank[py]:
            self.parent[px] = py
        elif self.rank[py] < self.rank[px]:
            self.parent[py] = px
        else:
            self.parent[py] = px
            self.rank[px] += 1
        return True

def kruskal(graph):
    edges = []

    for u in range(len(graph)):
        for v, w in graph[u]:
            edges.append((u, v, w))
    edges.sort(key=lambda x: x[2])

    mst = []
    uf = UnionFind(len(graph))
    for u, v, w in edges:
        if uf.union(u, v):
            mst.append((u, v, w))
    return mst

# Example usage
graph = [
    [(1, 5), (2, 3)],
    [(0, 5), (2, 1), (3, 2)],
    [(0, 3), (1, 1), (3, 6), (4, 4)],
    [(1, 2), (2, 6), (4, 6)],
    [(2, 4), (3, 6)]
]

mst = kruskal(graph)
print("Minimum Spanning Tree:")
for u, v, w in mst:
    print(u, "--", v, ":", w)

